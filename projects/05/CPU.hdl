// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
		Not(in=instruction[15], out=AInstruction);
		Not(in=AInstruction, out=CInstruction);
		And(a=CInstruction, b=instruction[3], out=writeM);

		Mux16(a=ALUOut, b=instruction, sel=AInstruction, out=AMuxOut);

		And(a=CInstruction, b=instruction[5], out=CInstructionALoad);
		Or(a=AInstruction, b=CInstructionALoad, out=ALoad);
		ARegister(in=AMuxOut, load=ALoad, out=AOut, out[0..14]=addressM);

		And(a=CInstruction, b=instruction[4], out=DLoad);
		DRegister(in=ALUOut, load=DLoad, out=DOut);

		And(a=CInstruction, b=instruction[12], out=UseM);
		Mux16(a=AOut, b=inM, sel=UseM, out=ALUMuxOut);

		And(a=CInstruction, b=instruction[11], out=ZX);
		And(a=CInstruction, b=instruction[10], out=NX);
		And(a=CInstruction, b=instruction[9], out=ZY);
		And(a=CInstruction, b=instruction[8], out=NY);
		And(a=CInstruction, b=instruction[7], out=F);
		And(a=CInstruction, b=instruction[6], out=NO);
		ALU(
			x=DOut,
			y=ALUMuxOut,
			zx=ZX,
			nx=NX,
			zy=ZY,
			ny=NY,
			f=F,
			no=NO,

			zr=ALUZero,
			ng=ALUNegative,
			out=ALUOut,
			out=outM
		);

		Not(in=ALUZero, out=ALUNotZero);
		Not(in=ALUNegative, out=ALUNotNegative);
		And(a=ALUNotZero, b=ALUNotNegative, out=ALUPositive);
		And(a=instruction[0], b=ALUPositive, out=JGT);
		And(a=instruction[1], b=ALUZero, out=JEQ);
		And(a=instruction[2], b=ALUNegative, out=JLT);
		Or(a=JGT, b=JLT, out=JNE);
		Or(a=JEQ, b=JNE, out=JMP);
		And(a=CInstruction, b=JMP, out=CInstructionJMP);
		PC(in=AOut, load=CInstructionJMP, inc=true, reset=reset, out[0..14]=pc);
}
